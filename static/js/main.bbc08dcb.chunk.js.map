{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenres","_ref3","genre","Movie","_ref","genres","synopsis","rating","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA8DA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAY,iBAI5D,SAASC,EAATC,GAA8B,IAARC,EAAQD,EAARC,MAClB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAY,eAAeG,GAqB1BC,MArEf,SAAAC,GAA0D,IAA1CN,EAA0CM,EAA1CN,MAAON,EAAmCY,EAAnCZ,OAAQa,EAA2BD,EAA3BC,OAAQC,EAAmBF,EAAnBE,SAAUC,EAASH,EAATG,OAC7C,OACIb,EAAAC,EAAAC,cAAA,OAAKG,UAAY,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAY,iBACbL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAY,iBACbL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAY,gBACZM,EAAOG,IAAI,SAACN,EAAOO,GAAR,OAAkBf,EAAAC,EAAAC,cAACI,EAAD,CAAaE,MAASA,EAAOQ,IAAOD,OAEtEf,EAAAC,EAAAC,cAAA,OAAKG,UAAY,gBAAjB,YACaL,EAAAC,EAAAC,cAAA,YAAOW,IAEpBb,EAAAC,EAAAC,cAAA,OAAKG,UAAY,kBACbL,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACIiB,KAAMN,EACNO,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCYjBC,6MAhDbC,MAAQ,KAQRC,cAAgB,WAad,OAZeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAa,GAEnC,OADAC,QAAQC,IAAIF,GACL3B,EAAAC,EAAAC,cAAC4B,EAAD,CACL1B,MAASuB,EAAOI,cAChBjC,OAAU6B,EAAOK,mBACjBhB,IAAOW,EAAOM,GACdtB,OAAUgB,EAAOhB,OACjBC,SAAYe,EAAOf,SACnBC,OAAUc,EAAOd,cAOvBqB,gCAAa,SAAAC,IAAA,IAAAR,EAAA,OAAAS,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUd,EAAKe,WADf,OACLd,EADKW,EAAAI,KAEXhB,EAAKiB,SAAS,CACZhB,WAHS,wBAAAW,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKvB,SACvBwB,MAAM,SAAAC,GAAG,OAAIxB,QAAQC,IAAIuB,yFA9B1BP,KAAKX,8CAiCE,IACAP,EAAUkB,KAAKrB,MAAfG,OACP,OACE3B,EAAAC,EAAAC,cAAA,OAAKG,UAAWsB,EAAS,MAAQ,eAC9BkB,KAAKrB,MAAMG,OAASkB,KAAKpB,gBAAkB,qBA5ClC4B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.bbc08dcb.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport './Movie.css';\nimport LinesEllipsis from 'react-lines-ellipsis'\n\n// class Movie extends Component {\n\n//     static propTypes = {\n//         title : PropTypes.string.isRequired,\n//         poster : PropTypes.string.isRequired\n//     }\n\n//     render() {\n//         return (\n//             <div>\n//                 <MoviePoster poster={this.props.poster}/>\n//                 <h1>{this.props.title}</h1>\n//             </div>\n//         )\n//     }\n// }\n\nfunction Movie({title, poster, genres, synopsis, rating}) {\n    return (\n        <div className = \"Movie\">\n            <div className = \"Movie_Columns\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className = \"Movie_Columns\">\n                <h1>{title}</h1>\n                <div className = \"Movie_Genres\">\n                    {genres.map((genre, index) => <MovieGenres genre = {genre} key = {index} />)}\n                </div>\n                <div className = \"Movie_Rating\">\n                    Rating : <span>{rating}</span>\n                </div>\n                <div className = \"Movie_Synopsis\">\n                    <LinesEllipsis\n                        text={synopsis}\n                        maxLine='3'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'/>\n                </div>\n            </div>\n        </div> \n    )\n}\n\n// class MoviePoster extends Component {\n\n//     static propTypes = {\n//         poster : PropTypes.string.isRequired\n//     }\n\n//     render() {\n//         return (\n//             <img src={this.props.poster}/>\n//         )\n//     }\n// }\n\nfunction MoviePoster({poster, alt}) {\n    return (\n        <img src={poster} alt={alt} title={alt} className = \"Movie_Poster\"/>\n    )\n}\n\nfunction MovieGenres({genre}) {\n    return (\n        <span className = \"Movie_Genre\">{genre}</span>\n    )\n}\n\nMovie.propTypes = {\n    title : propTypes.string.isRequired,\n    poster : propTypes.string.isRequired,\n    genres : propTypes.array.isRequired,\n    synopsis : propTypes.string.isRequired,\n    rating : propTypes.number.isRequired\n}\n\nMoviePoster.propTypes = {\n    poster : propTypes.string.isRequired,\n    alt : propTypes.string.isRequired\n}\n\nMovieGenres.propTypes = {\n    genre : propTypes.string.isRequired\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie.js';\n\nclass App extends Component {\n\n  state = {\n    \n  }\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movies => {\n      console.log(movies);\n      return <Movie \n        title = {movies.title_english}\n        poster = {movies.medium_cover_image}\n        key = {movies.id}\n        genres = {movies.genres}\n        synopsis = {movies.synopsis}\n        rating = {movies.rating}\n        />\n    })\n\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App_loading\"}>\n        {this.state.movies ? this._renderMovies() : \"Loading...\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}